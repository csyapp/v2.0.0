package com.zmfx.csc.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TemplateAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTemplateAllPropertiesEquals(Template expected, Template actual) {
        assertTemplateAutoGeneratedPropertiesEquals(expected, actual);
        assertTemplateAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTemplateAllUpdatablePropertiesEquals(Template expected, Template actual) {
        assertTemplateUpdatableFieldsEquals(expected, actual);
        assertTemplateUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTemplateAutoGeneratedPropertiesEquals(Template expected, Template actual) {
        assertThat(expected)
            .as("Verify Template auto generated properties")
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTemplateUpdatableFieldsEquals(Template expected, Template actual) {
        assertThat(expected)
            .as("Verify Template relevant properties")
            .satisfies(e -> assertThat(e.getLibelle()).as("check libelle").isEqualTo(actual.getLibelle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getImageHeigth()).as("check imageHeigth").isEqualTo(actual.getImageHeigth()))
            .satisfies(e -> assertThat(e.getImageWidth()).as("check imageWidth").isEqualTo(actual.getImageWidth()))
            .satisfies(e -> assertThat(e.getImageX()).as("check imageX").isEqualTo(actual.getImageX()))
            .satisfies(e -> assertThat(e.getImageY()).as("check imageY").isEqualTo(actual.getImageY()))
            .satisfies(e -> assertThat(e.getMatriculeX()).as("check matriculeX").isEqualTo(actual.getMatriculeX()))
            .satisfies(e -> assertThat(e.getMatriculeY()).as("check matriculeY").isEqualTo(actual.getMatriculeY()))
            .satisfies(e -> assertThat(e.getMembreX()).as("check membreX").isEqualTo(actual.getMembreX()))
            .satisfies(e -> assertThat(e.getMembreY()).as("check membreY").isEqualTo(actual.getMembreY()))
            .satisfies(e -> assertThat(e.getNomX()).as("check nomX").isEqualTo(actual.getNomX()))
            .satisfies(e -> assertThat(e.getNomY()).as("check nomY").isEqualTo(actual.getNomY()))
            .satisfies(e -> assertThat(e.getPrenomX()).as("check prenomX").isEqualTo(actual.getPrenomX()))
            .satisfies(e -> assertThat(e.getPrenomY()).as("check prenomY").isEqualTo(actual.getPrenomY()))
            .satisfies(e -> assertThat(e.getQrHeight()).as("check qrHeight").isEqualTo(actual.getQrHeight()))
            .satisfies(e -> assertThat(e.getQrWidth()).as("check qrWidth").isEqualTo(actual.getQrWidth()))
            .satisfies(e -> assertThat(e.getQrX()).as("check qrX").isEqualTo(actual.getQrX()))
            .satisfies(e -> assertThat(e.getQrY()).as("check qrY").isEqualTo(actual.getQrY()))
            .satisfies(e -> assertThat(e.getDateDelivranceX()).as("check dateDelivranceX").isEqualTo(actual.getDateDelivranceX()))
            .satisfies(e -> assertThat(e.getDateDelivranceY()).as("check dateDelivranceY").isEqualTo(actual.getDateDelivranceY()))
            .satisfies(e -> assertThat(e.getDateExpirationX()).as("check dateExpirationX").isEqualTo(actual.getDateExpirationX()))
            .satisfies(e -> assertThat(e.getDateExpirationY()).as("check dateExpirationY").isEqualTo(actual.getDateExpirationY()))
            .satisfies(e -> assertThat(e.getSampleLargeur()).as("check sampleLargeur").isEqualTo(actual.getSampleLargeur()))
            .satisfies(e -> assertThat(e.getSampleLongueur()).as("check sampleLongueur").isEqualTo(actual.getSampleLongueur()))
            .satisfies(e -> assertThat(e.getPdfContentRecto()).as("check pdfContentRecto").isEqualTo(actual.getPdfContentRecto()))
            .satisfies(
                e ->
                    assertThat(e.getPdfContentRectoContentType())
                        .as("check pdfContentRecto contenty type")
                        .isEqualTo(actual.getPdfContentRectoContentType())
            )
            .satisfies(e -> assertThat(e.getPdfContentVerso()).as("check pdfContentVerso").isEqualTo(actual.getPdfContentVerso()))
            .satisfies(
                e ->
                    assertThat(e.getPdfContentVersoContentType())
                        .as("check pdfContentVerso contenty type")
                        .isEqualTo(actual.getPdfContentVersoContentType())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTemplateUpdatableRelationshipsEquals(Template expected, Template actual) {}
}
