package com.zmfx.csc.domain;

import static com.zmfx.csc.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class CarteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarteAllPropertiesEquals(Carte expected, Carte actual) {
        assertCarteAutoGeneratedPropertiesEquals(expected, actual);
        assertCarteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarteAllUpdatablePropertiesEquals(Carte expected, Carte actual) {
        assertCarteUpdatableFieldsEquals(expected, actual);
        assertCarteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarteAutoGeneratedPropertiesEquals(Carte expected, Carte actual) {
        assertThat(expected)
            .as("Verify Carte auto generated properties")
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarteUpdatableFieldsEquals(Carte expected, Carte actual) {
        assertThat(expected)
            .as("Verify Carte relevant properties")
            .satisfies(e -> assertThat(e.getMatricule()).as("check matricule").isEqualTo(actual.getMatricule()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getSurname()).as("check surname").isEqualTo(actual.getSurname()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getVilleResidence()).as("check villeResidence").isEqualTo(actual.getVilleResidence()))
            .satisfies(
                e ->
                    assertThat(e.getBirthdate())
                        .as("check birthdate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getBirthdate())
            )
            .satisfies(e -> assertThat(e.getTelephone1()).as("check telephone1").isEqualTo(actual.getTelephone1()))
            .satisfies(e -> assertThat(e.getTelephone2()).as("check telephone2").isEqualTo(actual.getTelephone2()))
            .satisfies(e -> assertThat(e.getIsImprime()).as("check isImprime").isEqualTo(actual.getIsImprime()))
            .satisfies(e -> assertThat(e.getPictureExtension()).as("check pictureExtension").isEqualTo(actual.getPictureExtension()))
            .satisfies(e -> assertThat(e.getPicture()).as("check picture").isEqualTo(actual.getPicture()))
            .satisfies(
                e -> assertThat(e.getPictureContentType()).as("check picture contenty type").isEqualTo(actual.getPictureContentType())
            )
            .satisfies(e -> assertThat(e.getDateDelivrance()).as("check dateDelivrance").isEqualTo(actual.getDateDelivrance()))
            .satisfies(e -> assertThat(e.getDateExpiration()).as("check dateExpiration").isEqualTo(actual.getDateExpiration()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCarteUpdatableRelationshipsEquals(Carte expected, Carte actual) {
        assertThat(expected)
            .as("Verify Carte relationships")
            .satisfies(e -> assertThat(e.getTemplate()).as("check template").isEqualTo(actual.getTemplate()));
    }
}
